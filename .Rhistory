clusttwo <-  Mclust(servetwo, 3:12)
summary(clusttwo)
plot(clustone, what = 'BIC',
legendArgs = list(x = "bottomright", ncol = 5))
runApp('modelapp')
runApp('modelapp')
shiny::runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
knitr::opts_chunk$set(
echo =TRUE,
message = FALSE,
warning = FALSE,
cache = TRUE,
fig.align = "center")
library(tidyverse)
library(ggplot2)
library(ggExtra)
library(cluster)
library(NbClust)
library(Rmixmod)
library(mclust)
library(naniar)
modelo9
modelo9 <- mixmodCluster(serveone[,c("X","Y")], 9)
modelo9
runApp('modelapp')
View(servetwo)
View(serveone)
runApp('app')
runApp('modelapp')
shiny::runApp('modelapp')
View(positions)
knitr::opts_chunk$set(echo = FALSE, cache=TRUE, messages=FALSE, warning=FALSE)
# Make sure you have the latest versions of rmarkdown and bookdown installed
library(ggplot2)
library(tidyverse)
library(ggExtra)
library(cluster)
library(NbClust)
library(Rmixmod)
library(mclust)
library(naniar)
knitr::include_graphics("image/tennis_court.png")
knitr::include_graphics("image/tennis_court.png")
knitr::include_graphics("image/tennis_court.png")
library(factoextra)
knitr::opts_chunk$set(echo = FALSE, cache=TRUE, messages=FALSE, warning=FALSE)
# Make sure you have the latest versions of rmarkdown and bookdown installed
library(ggplot2)
library(tidyverse)
library(ggExtra)
library(cluster)
library(NbClust)
library(Rmixmod)
library(mclust)
library(naniar)
library(factoextra)
positions <- position %>%
mutate(hard = case_when(surface == "Hard" ~1,
surface == "Hard" ~0))
position <- readRDS("data/position.rds")
positions <- position %>%
mutate(hard = case_when(surface == "Hard" ~1,
surface == "Hard" ~0))
knitr::opts_chunk$set(echo = FALSE, cache=TRUE, messages=FALSE, warning=FALSE)
# Make sure you have the latest versions of rmarkdown and bookdown installed
library(ggplot2)
library(tidyverse)
library(ggExtra)
library(cluster)
library(NbClust)
library(Rmixmod)
library(mclust)
library(naniar)
library(factoextra)
knitr::include_graphics("image/tennis_court.png")
knitr::include_graphics("image/dataset.png")
position <- readRDS("data/position.rds")
positions <- position %>%
mutate(hard = case_when(surface == "Hard" ~1,
surface == "Hard" ~0))
summarydata <- summary(positions)
summarydata
gg_miss_var(positions)
ames_scale <- positions%>%
select_if(is.numeric) %>%  # select numeric columns
select(-Sale_Price) %>%    # remove target column
mutate_all(as.double) %>%  # coerce to double type
scale()
View(positions)
ames_scale <- positions%>%
select_if(is.numeric) %>%  # select numeric columns
select(-X, -Y, -Z) %>%    # remove target column
mutate_all(as.double) %>%  # coerce to double type
scale()
View(ames_scale)
ames_scale <- positions%>%
select_if(is.numeric)  # select numeric columns
View(ames_scale)
ames_scale <- positions%>%
select_if(is.numeric) %>% # select numeric columns
select(-X, -Y, -Z, year, server_n, receiver_n, server_id, return_id) %>%    # remove target column
mutate_all(as.double) %>%  # coerce to double type
scale()
View(ames_scale)
position <- readRDS("data/position.rds")
positions <- position %>%
mutate(hard = case_when(surface == "Hard" ~ 1,
surface == "Hard" ~ 0))
ames_scale <- positions%>%
select_if(is.numeric) %>% # select numeric columns
select(-X, -Y, -Z, year, server_n, receiver_n, server_id, return_id) %>%    # remove target column
mutate_all(as.double) %>%  # coerce to double type
scale()
position <- readRDS("data/position.rds")
positions <- position %>%
mutate(hard = case_when(surface == "Hard" ~ "1",
surface == "Hard" ~ "0"))
ames_scale <- positions%>%
select_if(is.numeric) %>% # select numeric columns
select(-X, -Y, -Z, year, server_n, receiver_n, server_id, return_id) %>%    # remove target column
mutate_all(as.double) %>%  # coerce to double type
scale()
View(ames_scale)
ames_scale <- positions%>%
select_if(is.numeric) %>% # select numeric columns
select(-X, -Y, -Z, -year, -server_n, -receiver_n, -server_id, -return_id) %>%    # remove target column
mutate_all(as.double) %>%  # coerce to double type
scale()
ames_scale <- positions%>%
select_if(is.numeric) %>% # select numeric columns
select(-X, -Y, -Z, -year, -server_n, -receiver_n, -server_id, -return_id) %>%    # remove target column
mutate_all(as.double) %>%  # coerce to double type
scale() %>%
head(1000)
View(ames_scale)
# For reproducibility
set.seed(123)
# Dissimilarity matrix
d <- dist(ames_scale, method = "euclidean")
# Hierarchical clustering using Complete Linkage
hc1 <- hclust(d, method = "complete" )
# For reproducibility
set.seed(123)
# Compute maximum or complete linkage clustering with agnes
hc2 <- agnes(ames_scale, method = "complete")
# Agglomerative coefficient
hc2$ac
## [1] 0.926775
# For reproducibility
set.seed(123)
# Compute maximum or complete linkage clustering with agnes
hc2 <- agnes(ames_scale, method = "complete")
# Agglomerative coefficient
hc2$ac
ames_scale <- positions%>%
select_if(is.numeric) %>% # select numeric columns
select(-X, -Y, -Z, -year) %>%    # remove target column -server_n, -receiver_n, -server_id, -return_id
mutate_all(as.double) %>%  # coerce to double type
scale() %>%
head(1000)
# For reproducibility
set.seed(123)
# Dissimilarity matrix
d <- dist(ames_scale, method = "euclidean")
# Hierarchical clustering using Complete Linkage
hc1 <- hclust(d, method = "complete" )
# For reproducibility
set.seed(123)
# Compute maximum or complete linkage clustering with agnes
hc2 <- agnes(ames_scale, method = "complete")
# Agglomerative coefficient
hc2$ac
# methods to assess
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")
# function to compute coefficient
ac <- function(x) {
agnes(ames_scale, method = x)$ac
}
# get agglomerative coefficient for each linkage method
purrr::map_dbl(m, ac)
##   average    single  complete      ward
## 0.9139303 0.8712890 0.9267750 0.9766577
# compute divisive hierarchical clustering
hc4 <- diana(ames_scale)
# Divise coefficient; amount of clustering structure found
hc4$dc
# Plot cluster results
p1 <- fviz_nbclust(ames_scale, FUN = hcut, method = "wss",
k.max = 10) +
ggtitle("(A) Elbow method")
p2 <- fviz_nbclust(ames_scale, FUN = hcut, method = "silhouette",
k.max = 10) +
ggtitle("(B) Silhouette method")
p3 <- fviz_nbclust(ames_scale, FUN = hcut, method = "gap_stat",
k.max = 10) +
ggtitle("(C) Gap statistic")
# Display plots side by side
gridExtra::grid.arrange(p1, p2, p3, nrow = 1)
# Construct dendorgram for the Ames housing example
hc5 <- hclust(d, method = "ward.D2" )
dend_plot <- fviz_dend(hc5)
dend_data <- attr(dend_plot, "dendrogram")
dend_cuts <- cut(dend_data, h = 8)
fviz_dend(dend_cuts$lower[[2]])
# Ward's method
hc5 <- hclust(d, method = "ward.D2" )
# Cut tree into 4 groups
sub_grp <- cutree(hc5, k = 8)
# Number of members in each cluster
table(sub_grp)
# Plot cluster results
p1 <- fviz_nbclust(ames_scale, FUN = hcut, method = "wss",
k.max = 12) +
ggtitle("(A) Elbow method")
p2 <- fviz_nbclust(ames_scale, FUN = hcut, method = "silhouette",
k.max = 12) +
ggtitle("(B) Silhouette method")
p3 <- fviz_nbclust(ames_scale, FUN = hcut, method = "gap_stat",
k.max = 12) +
ggtitle("(C) Gap statistic")
ames_scale <- positions%>%
filter(player == ""R. Federer"") %>%
ames_scale <- positions%>%
filter(player == "R. Federer") %>%
select_if(is.numeric) %>% # select numeric columns
select(-X, -Y, -Z, -year) %>%    # remove target column -server_n, -receiver_n, -server_id, -return_id
mutate_all(as.double) %>%  # coerce to double type
scale() %>%
head(1000)
ames_scale <- positions%>%
filter(player == "R. Federer") %>%
select_if(is.numeric) %>% # select numeric columns
select(-X, -Y, -Z, -year) %>%    # remove target column -server_n, -receiver_n, -server_id, -return_id
mutate_all(as.double) %>%  # coerce to double type
scale()
# For reproducibility
set.seed(123)
# Dissimilarity matrix
d <- dist(ames_scale, method = "euclidean")
# Hierarchical clustering using Complete Linkage
hc1 <- hclust(d, method = "complete" )
# For reproducibility
set.seed(123)
# Compute maximum or complete linkage clustering with agnes
hc2 <- agnes(ames_scale, method = "complete")
# Agglomerative coefficient
hc2$ac
# methods to assess
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")
# function to compute coefficient
ac <- function(x) {
agnes(ames_scale, method = x)$ac
}
# get agglomerative coefficient for each linkage method
purrr::map_dbl(m, ac)
# compute divisive hierarchical clustering
hc4 <- diana(ames_scale)
# Divise coefficient; amount of clustering structure found
hc4$dc
# Plot cluster results
p1 <- fviz_nbclust(ames_scale, FUN = hcut, method = "wss",
k.max = 12) +
ggtitle("(A) Elbow method")
p2 <- fviz_nbclust(ames_scale, FUN = hcut, method = "silhouette",
k.max = 12) +
ggtitle("(B) Silhouette method")
p3 <- fviz_nbclust(ames_scale, FUN = hcut, method = "gap_stat",
k.max = 12) +
ggtitle("(C) Gap statistic")
# For reproducibility
set.seed(123)
# Compute maximum or complete linkage clustering with agnes
hc2 <- agnes(ames_scale, method = "complete")
# Agglomerative coefficient
hc2$ac
# Plot cluster results
p1 <- fviz_nbclust(ames_scale, FUN = hcut, method = "wss",
k.max = 10) +
ggtitle("(A) Elbow method")
p2 <- fviz_nbclust(ames_scale, FUN = hcut, method = "silhouette",
k.max = 10) +
ggtitle("(B) Silhouette method")
p3 <- fviz_nbclust(ames_scale, FUN = hcut, method = "gap_stat",
k.max = 10) +
ggtitle("(C) Gap statistic")
ames_scale <- positions%>%
select_if(is.numeric) %>% # select numeric columns
select(-Z, -year) %>%    # remove target column -server_n, -receiver_n, -server_id, -return_id
mutate_all(as.double) %>%  # coerce to double type
scale()
# Define dimensions of tennis court on negative X (receiver) side only
courtTrace <- data.frame(x = c(-11.89, -11.89, -5.4, -5.4, -11.89, -11.89, -5.4, -5.4, -11.89, -6.4, -6.4, -5.4, -5.4, -5.4, -6.4),
y = c(5.49, -5.49, -5.49, 5.49, 5.49, 4.115, 4.115, -4.115, -4.115, -4.115, 4.115, 4.115, -4.115, 0, 0))
shiny::runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
View(position)
View(positions)
View(positions)
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
knitr::opts_chunk$set(
echo =TRUE,
message = FALSE,
warning = FALSE,
cache = TRUE,
fig.align = "center")
library(tidyverse)
library(ggplot2)
library(ggExtra)
library(cluster)
library(NbClust)
library(Rmixmod)
library(mclust)
library(naniar)
courtcolor <- '#0a8d45'
courtinside <- '#0a8d45'
positions %>%
filter(player == "N. Djokovic", "R. Federer", "D. Thiem", "R. Nadal" ,
surface == "Hard",
Servetype == "DeuceWide",
serve == "1") %>%
ggplot(aes(y = Y, x = X)) +
annotate("rect", xmin=-Inf, xmax=-5.4, ymin=-Inf, ymax=Inf, fill=courtcolor) +
annotate("rect", xmin=-11.89, xmax=-5.4, ymin=-5.49, ymax=5.49, fill=courtinside) +
geom_path(data = courtTrace, aes(x = x, y = y), color = 'black', size = 1) +
geom_segment(aes(x= -5.4, xend= -5.4, y= -6.5, yend= 6.5), size = 2, color = 'lightgrey',
lineend = 'round') +
geom_point(size = 3, aes(col = factor(serve, lab = c("FIRST", "SECOND"))), alpha = 0.5) +
scale_colour_manual("Serve", values = c("orange", "#f572b9")) +
theme_bw() +
coord_flip() +
theme(legend.position = "top") +
scale_x_continuous("Depth (meters from net)", n. = 8) +
scale_y_continuous("Lateral position (meters from center)", n. = 8)
positions %>%
filter(player %in% c("N. Djokovic", "R. Federer", "D. Thiem", "R. Nadal"),
surface == "Hard",
Servetype == "DeuceWide",
serve == "1") %>%
ggplot(aes(y = Y, x = X)) +
annotate("rect", xmin=-Inf, xmax=-5.4, ymin=-Inf, ymax=Inf, fill=courtcolor) +
annotate("rect", xmin=-11.89, xmax=-5.4, ymin=-5.49, ymax=5.49, fill=courtinside) +
geom_path(data = courtTrace, aes(x = x, y = y), color = 'black', size = 1) +
geom_segment(aes(x= -5.4, xend= -5.4, y= -6.5, yend= 6.5), size = 2, color = 'lightgrey',
lineend = 'round') +
geom_point(size = 3, aes(col = factor(serve, lab = c("FIRST", "SECOND"))), alpha = 0.5) +
scale_colour_manual("Serve", values = c("orange", "#f572b9")) +
theme_bw() +
coord_flip() +
theme(legend.position = "top") +
scale_x_continuous("Depth (meters from net)", n. = 8) +
scale_y_continuous("Lateral position (meters from center)", n. = 8)
runApp('modelapp')
positions %>%
filter(player %in% c("N. Djokovic", "R. Federer", "D. Thiem", "R. Nadal"),
surface == "Hard",
Servetype == "DeuceWide",
serve == "1") %>%
ggplot(aes(y = Y, x = X)) +
annotate("rect", xmin=-Inf, xmax=-5.4, ymin=-Inf, ymax=Inf, fill=courtcolor) +
annotate("rect", xmin=-11.89, xmax=-5.4, ymin=-5.49, ymax=5.49, fill=courtinside) +
geom_path(data = courtTrace, aes(x = x, y = y), color = 'black', size = 1) +
geom_segment(aes(x= -5.4, xend= -5.4, y= -6.5, yend= 6.5), size = 2, color = 'lightgrey',
lineend = 'round') +
geom_point(size = 3, aes(col = factor(serve, lab = "FIRST")), alpha = 0.5) +
scale_colour_manual("Serve", values = c("orange", "#f572b9")) +
theme_bw() +
coord_flip() +
theme(legend.position = "top") +
scale_x_continuous("Depth (meters from net)", n. = 8) +
scale_y_continuous("Lateral position (meters from center)", n. = 8)
positions %>%
filter(player %in% c("N. Djokovic", "R. Federer", "D. Thiem", "R. Nadal"),
surface == "Hard",
Servetype == "DeuceWide",
serve == "1") %>%
ggplot(aes(y = Y, x = X)) +
annotate("rect", xmin=-Inf, xmax=-5.4, ymin=-Inf, ymax=Inf, fill=courtcolor) +
annotate("rect", xmin=-11.89, xmax=-5.4, ymin=-5.49, ymax=5.49, fill=courtinside) +
geom_path(data = courtTrace, aes(x = x, y = y), color = 'black', size = 1) +
geom_segment(aes(x= -5.4, xend= -5.4, y= -6.5, yend= 6.5), size = 2, color = 'lightgrey',
lineend = 'round') +
geom_point(size = 3, aes(col = factor(serve, lab = "FIRST"), color = input$player), alpha = 0.5) +
scale_colour_manual("Serve", values = c("orange", "#f572b9")) +
theme_bw() +
coord_flip() +
theme(legend.position = "top") +
scale_x_continuous("Depth (meters from net)", n. = 8) +
scale_y_continuous("Lateral position (meters from center)", n. = 8)
positions %>%
filter(player %in% c("N. Djokovic", "R. Federer", "D. Thiem", "R. Nadal"),
surface == "Hard",
Servetype == "DeuceWide",
serve == "1") %>%
ggplot(aes(y = Y, x = X)) +
annotate("rect", xmin=-Inf, xmax=-5.4, ymin=-Inf, ymax=Inf, fill=courtcolor) +
annotate("rect", xmin=-11.89, xmax=-5.4, ymin=-5.49, ymax=5.49, fill=courtinside) +
geom_path(data = courtTrace, aes(x = x, y = y), color = 'black', size = 1) +
geom_segment(aes(x= -5.4, xend= -5.4, y= -6.5, yend= 6.5), size = 2, color = 'lightgrey',
lineend = 'round') +
geom_point(size = 3, aes(col = factor(serve, lab = "FIRST"), color = player), alpha = 0.5) +
scale_colour_manual("Serve", values = c("orange", "#f572b9")) +
theme_bw() +
coord_flip() +
theme(legend.position = "top") +
scale_x_continuous("Depth (meters from net)", n. = 8) +
scale_y_continuous("Lateral position (meters from center)", n. = 8)
positions %>%
filter(player %in% c("N. Djokovic", "R. Federer", "D. Thiem", "R. Nadal"),
surface == "Hard",
Servetype == "DeuceWide",
serve == "1") %>%
ggplot(aes(y = Y, x = X)) +
annotate("rect", xmin=-Inf, xmax=-5.4, ymin=-Inf, ymax=Inf, fill=courtcolor) +
annotate("rect", xmin=-11.89, xmax=-5.4, ymin=-5.49, ymax=5.49, fill=courtinside) +
geom_path(data = courtTrace, aes(x = x, y = y), color = 'black', size = 1) +
geom_segment(aes(x= -5.4, xend= -5.4, y= -6.5, yend= 6.5), size = 2, color = 'lightgrey',
lineend = 'round') +
geom_point(size = 3, aes(col = factor(serve, lab = "FIRST"), colour = player), alpha = 0.5) +
scale_colour_manual("Serve", values = c("orange", "#f572b9")) +
theme_bw() +
coord_flip() +
theme(legend.position = "top") +
scale_x_continuous("Depth (meters from net)", n. = 8) +
scale_y_continuous("Lateral position (meters from center)", n. = 8)
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
runApp('modelapp')
knitr::include_graphics("image/dashboard.png")
clusttwo <-  Mclust(servetwo, 3:12)
servetwo <- positions %>%
dplyr::filter(serve == 2)
clusttwo <-  Mclust(servetwo, 3:12)
serveone <- positions %>%
dplyr::filter(serve == 1)
servetwo <- positions %>%
dplyr::filter(serve == 2)
clustone <-  Mclust(serveone, 3:12)
clustone <-  Mclust(serveone, 3:12)
knitr::opts_chunk$set(echo = FALSE, cache=TRUE, messages=FALSE, warning=FALSE)
# Make sure you have the latest versions of rmarkdown and bookdown installed
library(ggplot2)
library(tidyverse)
library(ggExtra)
library(cluster)
library(NbClust)
library(Rmixmod)
library(mclust)
library(naniar)
library(factoextra)
knitr::include_graphics("image/tennis_court.png")
position <- readRDS("data/position.rds")
positions <- position %>%
mutate(hard = case_when(surface == "Hard" ~ "1",
surface == "Hard" ~ "0"))
View(positions)
position <- readRDS("data/position.rds")
positions <- position %>%
mutate(hard = case_when(surface == "Hard" ~ 1,
surface == "Hard" ~ 0))
View(positions)
position <- readRDS("data/position.rds")
positions <- position %>%
mutate(hard = case_when(surface == "Hard" ~ 1,
surface != "Hard" ~ 0))
View(positions)
gg_miss_var(positions)
clustone <-  Mclust(serveone, 3:12)
